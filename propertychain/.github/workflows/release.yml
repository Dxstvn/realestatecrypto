# Release Workflow - PropertyChain
# 
# Automated release management
# Following UpdatedUIPlan.md Step 60 specifications and CLAUDE.md principles

name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  # Create release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release-url: ${{ steps.create-release.outputs.url }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Get previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found, including all commits"
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            echo "Generating changelog from $PREVIOUS_TAG to HEAD"
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges $PREVIOUS_TAG..HEAD)
          fi
          
          # Create changelog
          cat > CHANGELOG.md << EOF
          ## What's Changed
          
          ### Features
          $(echo "$COMMITS" | grep -E "^- (feat|feature):" || echo "No new features")
          
          ### Bug Fixes
          $(echo "$COMMITS" | grep -E "^- (fix|bugfix):" || echo "No bug fixes")
          
          ### Documentation
          $(echo "$COMMITS" | grep -E "^- (docs|doc):" || echo "No documentation changes")
          
          ### Other Changes
          $(echo "$COMMITS" | grep -vE "^- (feat|feature|fix|bugfix|docs|doc):" || echo "No other changes")
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...${{ steps.version.outputs.version }}
          EOF
          
          # Output changelog for release notes
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}

  # Build release artifacts
  build-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        include:
          - platform: linux
            arch: x64
          - platform: darwin
            arch: x64
          - platform: darwin
            arch: arm64
          - platform: win32
            arch: x64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_BASE_URL: https://propertychain.com

      - name: Create standalone build
        run: |
          # Create standalone build for the platform
          mkdir -p dist/${{ matrix.platform }}-${{ matrix.arch }}
          cp -r .next/standalone/* dist/${{ matrix.platform }}-${{ matrix.arch }}/
          cp -r .next/static dist/${{ matrix.platform }}-${{ matrix.arch }}/.next/
          cp -r public dist/${{ matrix.platform }}-${{ matrix.arch }}/
          
          # Create archive
          cd dist
          if [ "${{ matrix.platform }}" == "win32" ]; then
            zip -r propertychain-${{ needs.create-release.outputs.version }}-${{ matrix.platform }}-${{ matrix.arch }}.zip ${{ matrix.platform }}-${{ matrix.arch }}
          else
            tar -czf propertychain-${{ needs.create-release.outputs.version }}-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz ${{ matrix.platform }}-${{ matrix.arch }}
          fi

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-${{ matrix.platform }}-${{ matrix.arch }}
          path: dist/propertychain-*
          retention-days: 7

  # Docker image
  docker-release:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            propertychain/app:latest
            propertychain/app:${{ needs.create-release.outputs.version }}
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ needs.create-release.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Publish release
  publish-release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: [create-release, build-artifacts, docker-release]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Upload artifacts to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update release notes
        uses: actions/github-script@v6
        with:
          script: |
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: '${{ needs.create-release.outputs.version }}'
            });
            
            const currentBody = release.data.body || '';
            const additionalNotes = `
            
            ## ðŸ“¦ Installation
            
            ### Docker
            \`\`\`bash
            docker pull propertychain/app:${{ needs.create-release.outputs.version }}
            docker run -p 3000:3000 propertychain/app:${{ needs.create-release.outputs.version }}
            \`\`\`
            
            ### Standalone
            Download the appropriate archive for your platform from the assets below and run:
            \`\`\`bash
            npm start
            \`\`\`
            
            ## ðŸ”— Links
            - [Documentation](https://docs.propertychain.com)
            - [Docker Hub](https://hub.docker.com/r/propertychain/app)
            - [GitHub Container Registry](https://ghcr.io/${{ github.repository }})
            `;
            
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id,
              body: currentBody + additionalNotes
            });

      - name: Notify release
        uses: actions/github-script@v6
        with:
          script: |
            // Create issue for release announcement
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸŽ‰ Release ${{ needs.create-release.outputs.version }} is now available!`,
              body: `A new version of PropertyChain has been released!\n\n[View Release](https://github.com/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.version }})`,
              labels: ['announcement', 'release']
            });