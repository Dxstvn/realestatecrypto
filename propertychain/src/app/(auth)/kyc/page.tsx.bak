/**
 * KYC Verification Flow - PropertyChain
 * 
 * Multi-step KYC/AML verification wizard following RECOVERY_PLAN.md Step 2.2
 * Includes document upload, identity verification, and compliance checks
 */

'use client'

import * as React from 'react'
import { useRouter } from 'next/navigation'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Progress } from '@/components/ui/progress'
import { Badge } from '@/components/ui/badge'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Separator } from '@/components/ui/separator'
import { Checkbox } from '@/components/ui/checkbox'
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
import {
  User,
  FileText,
  Shield,
  CreditCard,
  CheckCircle,
  AlertCircle,
  Upload,
  Camera,
  ArrowRight,
  ArrowLeft,
  Info,
  Building,
  Home,
  Briefcase,
  DollarSign,
  Globe,
  Lock,
  Check,
  X,
  Clock,
  RefreshCw,
} from 'lucide-react'
import { cn } from '@/lib/utils'
import { toast } from 'sonner'
import { FileUpload } from '@/components/custom/file-upload'
import { formatCurrency } from '@/lib/format'

// ============================================================================
// Types
// ============================================================================

interface KYCFormData {
  // Personal Information
  firstName: string
  lastName: string
  middleName?: string
  dateOfBirth: string
  ssn: string
  phoneNumber: string
  
  // Address Information
  streetAddress: string
  apartment?: string
  city: string
  state: string
  zipCode: string
  country: string
  yearsAtAddress: number
  
  // Employment Information
  employmentStatus: 'employed' | 'self-employed' | 'retired' | 'student' | 'unemployed'
  employerName?: string
  jobTitle?: string
  annualIncome: number
  sourceOfFunds: string
  
  // Investment Information
  investmentExperience: 'none' | 'beginner' | 'intermediate' | 'advanced' | 'professional'
  investmentGoals: string[]
  riskTolerance: 'conservative' | 'moderate' | 'aggressive'
  expectedInvestmentAmount: number
  accreditedInvestor: boolean
  
  // Documents
  governmentIdFront?: File
  governmentIdBack?: File
  proofOfAddress?: File
  selfie?: File
  bankStatement?: File
  
  // Compliance
  politicallyExposed: boolean
  sanctionsList: boolean
  termsAccepted: boolean
  privacyAccepted: boolean
  amlAccepted: boolean
}

interface StepConfig {
  id: string
  title: string
  description: string
  icon: React.ElementType
  fields: string[]
}

// ============================================================================
// KYC Verification Component
// ============================================================================

export default function KYCVerificationPage() {
  const router = useRouter()
  const [currentStep, setCurrentStep] = React.useState(0)
  const [isSubmitting, setIsSubmitting] = React.useState(false)
  const [verificationStatus, setVerificationStatus] = React.useState<'pending' | 'reviewing' | 'approved' | 'rejected'>('pending')
  
  // Form data state
  const [formData, setFormData] = React.useState<KYCFormData>({
    firstName: '',
    lastName: '',
    dateOfBirth: '',
    ssn: '',
    phoneNumber: '',
    streetAddress: '',
    city: '',
    state: '',
    zipCode: '',
    country: 'United States',
    yearsAtAddress: 1,
    employmentStatus: 'employed',
    annualIncome: 0,
    sourceOfFunds: '',
    investmentExperience: 'beginner',
    investmentGoals: [],
    riskTolerance: 'moderate',
    expectedInvestmentAmount: 10000,
    accreditedInvestor: false,
    politicallyExposed: false,
    sanctionsList: false,
    termsAccepted: false,
    privacyAccepted: false,
    amlAccepted: false,
  })
  
  // Validation errors
  const [errors, setErrors] = React.useState<Partial<Record<keyof KYCFormData, string>>>({})
  
  // Step configuration
  const steps: StepConfig[] = [
    {
      id: 'personal',
      title: 'Personal Information',
      description: 'Basic information for identity verification',
      icon: User,
      fields: ['firstName', 'lastName', 'middleName', 'dateOfBirth', 'ssn', 'phoneNumber'],
    },
    {
      id: 'address',
      title: 'Address Information',
      description: 'Current residential address',
      icon: Home,
      fields: ['streetAddress', 'apartment', 'city', 'state', 'zipCode', 'country', 'yearsAtAddress'],
    },
    {
      id: 'employment',
      title: 'Employment & Income',
      description: 'Financial capacity assessment',
      icon: Briefcase,
      fields: ['employmentStatus', 'employerName', 'jobTitle', 'annualIncome', 'sourceOfFunds'],
    },
    {
      id: 'investment',
      title: 'Investment Profile',
      description: 'Investment experience and goals',
      icon: DollarSign,
      fields: ['investmentExperience', 'investmentGoals', 'riskTolerance', 'expectedInvestmentAmount', 'accreditedInvestor'],
    },
    {
      id: 'documents',
      title: 'Document Upload',
      description: 'Required verification documents',
      icon: FileText,
      fields: ['governmentIdFront', 'governmentIdBack', 'proofOfAddress', 'selfie'],
    },
    {
      id: 'compliance',
      title: 'Compliance & Review',
      description: 'Legal declarations and consent',
      icon: Shield,
      fields: ['politicallyExposed', 'sanctionsList', 'termsAccepted', 'privacyAccepted', 'amlAccepted'],
    },
  ]
  
  const currentStepConfig = steps[currentStep]
  const progress = ((currentStep + 1) / steps.length) * 100
  
  // Validate current step
  const validateStep = (): boolean => {
    const newErrors: Partial<Record<keyof KYCFormData, string>> = {}
    const step = steps[currentStep]
    
    if (step.id === 'personal') {
      if (!formData.firstName) newErrors.firstName = 'First name is required'
      if (!formData.lastName) newErrors.lastName = 'Last name is required'
      if (!formData.dateOfBirth) newErrors.dateOfBirth = 'Date of birth is required'
      if (!formData.ssn || formData.ssn.length !== 9) newErrors.ssn = 'Valid SSN is required'
      if (!formData.phoneNumber) newErrors.phoneNumber = 'Phone number is required'
    }
    
    if (step.id === 'address') {
      if (!formData.streetAddress) newErrors.streetAddress = 'Street address is required'
      if (!formData.city) newErrors.city = 'City is required'
      if (!formData.state) newErrors.state = 'State is required'
      if (!formData.zipCode) newErrors.zipCode = 'ZIP code is required'
    }
    
    if (step.id === 'employment') {
      if (formData.employmentStatus === 'employed' && !formData.employerName) {
        newErrors.employerName = 'Employer name is required'
      }
      if (formData.annualIncome <= 0) newErrors.annualIncome = 'Annual income is required'
      if (!formData.sourceOfFunds) newErrors.sourceOfFunds = 'Source of funds is required'
    }
    
    if (step.id === 'investment') {
      if (formData.investmentGoals.length === 0) {
        newErrors.investmentGoals = 'Select at least one investment goal'
      }
      if (formData.expectedInvestmentAmount <= 0) {
        newErrors.expectedInvestmentAmount = 'Investment amount is required'
      }
    }
    
    if (step.id === 'documents') {
      if (!formData.governmentIdFront) newErrors.governmentIdFront = 'Government ID front is required'
      if (!formData.governmentIdBack) newErrors.governmentIdBack = 'Government ID back is required'
      if (!formData.proofOfAddress) newErrors.proofOfAddress = 'Proof of address is required'
      if (!formData.selfie) newErrors.selfie = 'Selfie verification is required'
    }
    
    if (step.id === 'compliance') {
      if (!formData.termsAccepted) newErrors.termsAccepted = 'You must accept the terms'
      if (!formData.privacyAccepted) newErrors.privacyAccepted = 'You must accept the privacy policy'
      if (!formData.amlAccepted) newErrors.amlAccepted = 'You must accept the AML policy'
    }
    
    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }
  
  // Handle next step
  const handleNext = () => {
    if (!validateStep()) {
      toast.error('Please complete all required fields')
      return
    }
    
    if (currentStep < steps.length - 1) {
      setCurrentStep(currentStep + 1)
    } else {
      handleSubmit()
    }
  }
  
  // Handle previous step
  const handlePrevious = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1)
    }
  }
  
  // Handle form submission
  const handleSubmit = async () => {
    setIsSubmitting(true)
    setVerificationStatus('reviewing')
    
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 3000))
      
      // Simulate approval (in production, this would be based on actual verification)
      setVerificationStatus('approved')
      toast.success('KYC verification submitted successfully!')
      
      // Redirect to dashboard after delay
      setTimeout(() => {
        router.push('/dashboard')
      }, 2000)
    } catch (error) {
      setVerificationStatus('rejected')
      toast.error('Verification failed. Please try again.')
    } finally {
      setIsSubmitting(false)
    }
  }
  
  // Update form data
  const updateFormData = (field: keyof KYCFormData, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }))
    // Clear error for this field
    if (errors[field]) {
      setErrors(prev => {
        const newErrors = { ...prev }
        delete newErrors[field]
        return newErrors
      })
    }
  }
  
  // Render verification status
  if (verificationStatus === 'reviewing') {
    return (
      <div className="container max-w-2xl mx-auto py-8">
        <Card>
          <CardContent className="py-16">
            <div className="text-center space-y-4">
              <div className="inline-flex items-center justify-center w-16 h-16 rounded-full bg-blue-100 animate-pulse">
                <Clock className="h-8 w-8 text-blue-600" />
              </div>
              <h2 className="text-2xl font-bold">Verifying Your Information</h2>
              <p className="text-muted-foreground max-w-md mx-auto">
                We're reviewing your documents. This usually takes 2-3 minutes.
              </p>
              <Progress value={66} className="max-w-xs mx-auto" />
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }
  
  if (verificationStatus === 'approved') {
    return (
      <div className="container max-w-2xl mx-auto py-8">
        <Card>
          <CardContent className="py-16">
            <div className="text-center space-y-4">
              <div className="inline-flex items-center justify-center w-16 h-16 rounded-full bg-green-100">
                <CheckCircle className="h-8 w-8 text-green-600" />
              </div>
              <h2 className="text-2xl font-bold">Verification Complete!</h2>
              <p className="text-muted-foreground max-w-md mx-auto">
                Your identity has been verified. You can now start investing in properties.
              </p>
              <Button onClick={() => router.push('/dashboard')} size="lg">
                Go to Dashboard
                <ArrowRight className="ml-2 h-4 w-4" />
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }
  
  if (verificationStatus === 'rejected') {
    return (
      <div className="container max-w-2xl mx-auto py-8">
        <Card>
          <CardContent className="py-16">
            <div className="text-center space-y-4">
              <div className="inline-flex items-center justify-center w-16 h-16 rounded-full bg-red-100">
                <X className="h-8 w-8 text-red-600" />
              </div>
              <h2 className="text-2xl font-bold">Verification Failed</h2>
              <p className="text-muted-foreground max-w-md mx-auto">
                We couldn't verify your information. Please check your documents and try again.
              </p>
              <Button onClick={() => setVerificationStatus('pending')} variant="outline" size="lg">
                <RefreshCw className="mr-2 h-4 w-4" />
                Try Again
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }
  
  return (
    <div className="container max-w-4xl mx-auto py-8">
      {/* Header */}
      <div className="mb-8">
        <h1 className="text-3xl font-bold mb-2">Identity Verification</h1>
        <p className="text-muted-foreground">
          Complete your KYC verification to start investing in properties
        </p>
      </div>
      
      {/* Progress Bar */}
      <div className="mb-8">
        <div className="flex items-center justify-between mb-4">
          <span className="text-sm text-muted-foreground">
            Step {currentStep + 1} of {steps.length}
          </span>
          <span className="text-sm font-medium">
            {currentStepConfig.title}
          </span>
        </div>
        <Progress value={progress} className="h-2" />
        
        {/* Step Indicators */}
        <div className="flex justify-between mt-4">
          {steps.map((step, index) => {
            const Icon = step.icon
            const isActive = index === currentStep
            const isCompleted = index < currentStep
            
            return (
              <button
                key={step.id}
                onClick={() => index < currentStep && setCurrentStep(index)}
                disabled={index > currentStep}
                className={cn(
                  'flex flex-col items-center gap-2 p-2 rounded-lg transition-colors',
                  isActive && 'bg-primary/10',
                  isCompleted && 'cursor-pointer hover:bg-muted',
                  index > currentStep && 'opacity-50 cursor-not-allowed'
                )}
              >
                <div className={cn(
                  'w-10 h-10 rounded-full flex items-center justify-center border-2 transition-colors',
                  isActive && 'border-primary bg-primary text-white',
                  isCompleted && 'border-primary bg-primary/20 text-primary',
                  !isActive && !isCompleted && 'border-muted-foreground'
                )}>
                  {isCompleted ? (
                    <Check className="h-5 w-5" />
                  ) : (
                    <Icon className="h-5 w-5" />
                  )}
                </div>
                <span className={cn(
                  'text-xs hidden sm:block',
                  isActive && 'font-medium',
                  !isActive && !isCompleted && 'text-muted-foreground'
                )}>
                  {step.title}
                </span>
              </button>
            )
          })}
        </div>
      </div>
      
      {/* Form Content */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <currentStepConfig.icon className="h-5 w-5" />
            {currentStepConfig.title}
          </CardTitle>
          <CardDescription>
            {currentStepConfig.description}
          </CardDescription>
        </CardHeader>
        
        <CardContent className="space-y-6">
          {/* Personal Information Step */}
          {currentStep === 0 && (
            <div className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="firstName">First Name *</Label>
                  <Input
                    id="firstName"
                    value={formData.firstName}
                    onChange={(e) => updateFormData('firstName', e.target.value)}
                    placeholder="John"
                    className={errors.firstName ? 'border-red-500' : ''}
                  />
                  {errors.firstName && (
                    <p className="text-sm text-red-500">{errors.firstName}</p>
                  )}
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="lastName">Last Name *</Label>
                  <Input
                    id="lastName"
                    value={formData.lastName}
                    onChange={(e) => updateFormData('lastName', e.target.value)}
                    placeholder="Doe"
                    className={errors.lastName ? 'border-red-500' : ''}
                  />
                  {errors.lastName && (
                    <p className="text-sm text-red-500">{errors.lastName}</p>
                  )}
                </div>
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="middleName">Middle Name (Optional)</Label>
                <Input
                  id="middleName"
                  value={formData.middleName}
                  onChange={(e) => updateFormData('middleName', e.target.value)}
                  placeholder="Michael"
                />
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="dateOfBirth">Date of Birth *</Label>
                  <Input
                    id="dateOfBirth"
                    type="date"
                    value={formData.dateOfBirth}
                    onChange={(e) => updateFormData('dateOfBirth', e.target.value)}
                    className={errors.dateOfBirth ? 'border-red-500' : ''}
                  />
                  {errors.dateOfBirth && (
                    <p className="text-sm text-red-500">{errors.dateOfBirth}</p>
                  )}
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="phoneNumber">Phone Number *</Label>
                  <Input
                    id="phoneNumber"
                    type="tel"
                    value={formData.phoneNumber}
                    onChange={(e) => updateFormData('phoneNumber', e.target.value)}
                    placeholder="(555) 123-4567"
                    className={errors.phoneNumber ? 'border-red-500' : ''}
                  />
                  {errors.phoneNumber && (
                    <p className="text-sm text-red-500">{errors.phoneNumber}</p>
                  )}
                </div>
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="ssn">Social Security Number *</Label>
                <div className="relative">
                  <Input
                    id="ssn"
                    type="password"
                    value={formData.ssn}
                    onChange={(e) => updateFormData('ssn', e.target.value.replace(/\D/g, ''))}
                    placeholder="•••-••-••••"
                    maxLength={9}
                    className={errors.ssn ? 'border-red-500' : ''}
                  />
                  <Lock className="absolute right-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                </div>
                {errors.ssn && (
                  <p className="text-sm text-red-500">{errors.ssn}</p>
                )}
                <p className="text-xs text-muted-foreground">
                  Your SSN is encrypted and used only for identity verification
                </p>
              </div>
            </div>
          )}
          
          {/* Address Information Step */}
          {currentStep === 1 && (
            <div className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="streetAddress">Street Address *</Label>
                <Input
                  id="streetAddress"
                  value={formData.streetAddress}
                  onChange={(e) => updateFormData('streetAddress', e.target.value)}
                  placeholder="123 Main Street"
                  className={errors.streetAddress ? 'border-red-500' : ''}
                />
                {errors.streetAddress && (
                  <p className="text-sm text-red-500">{errors.streetAddress}</p>
                )}
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="apartment">Apartment/Suite (Optional)</Label>
                <Input
                  id="apartment"
                  value={formData.apartment}
                  onChange={(e) => updateFormData('apartment', e.target.value)}
                  placeholder="Apt 4B"
                />
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="city">City *</Label>
                  <Input
                    id="city"
                    value={formData.city}
                    onChange={(e) => updateFormData('city', e.target.value)}
                    placeholder="New York"
                    className={errors.city ? 'border-red-500' : ''}
                  />
                  {errors.city && (
                    <p className="text-sm text-red-500">{errors.city}</p>
                  )}
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="state">State *</Label>
                  <Select
                    value={formData.state}
                    onValueChange={(value) => updateFormData('state', value)}
                  >
                    <SelectTrigger className={errors.state ? 'border-red-500' : ''}>
                      <SelectValue placeholder="Select state" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="NY">New York</SelectItem>
                      <SelectItem value="CA">California</SelectItem>
                      <SelectItem value="TX">Texas</SelectItem>
                      <SelectItem value="FL">Florida</SelectItem>
                      <SelectItem value="IL">Illinois</SelectItem>
                      {/* Add more states */}
                    </SelectContent>
                  </Select>
                  {errors.state && (
                    <p className="text-sm text-red-500">{errors.state}</p>
                  )}
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="zipCode">ZIP Code *</Label>
                  <Input
                    id="zipCode"
                    value={formData.zipCode}
                    onChange={(e) => updateFormData('zipCode', e.target.value)}
                    placeholder="10001"
                    className={errors.zipCode ? 'border-red-500' : ''}
                  />
                  {errors.zipCode && (
                    <p className="text-sm text-red-500">{errors.zipCode}</p>
                  )}
                </div>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="country">Country *</Label>
                  <Select
                    value={formData.country}
                    onValueChange={(value) => updateFormData('country', value)}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="United States">United States</SelectItem>
                      <SelectItem value="Canada">Canada</SelectItem>
                      <SelectItem value="United Kingdom">United Kingdom</SelectItem>
                      <SelectItem value="Australia">Australia</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="yearsAtAddress">Years at Address *</Label>
                  <Select
                    value={formData.yearsAtAddress.toString()}
                    onValueChange={(value) => updateFormData('yearsAtAddress', parseInt(value))}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="0">Less than 1 year</SelectItem>
                      <SelectItem value="1">1 year</SelectItem>
                      <SelectItem value="2">2 years</SelectItem>
                      <SelectItem value="3">3 years</SelectItem>
                      <SelectItem value="4">4 years</SelectItem>
                      <SelectItem value="5">5+ years</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </div>
          )}
          
          {/* Employment & Income Step */}
          {currentStep === 2 && (
            <div className="space-y-4">
              <div className="space-y-2">
                <Label>Employment Status *</Label>
                <RadioGroup
                  value={formData.employmentStatus}
                  onValueChange={(value: any) => updateFormData('employmentStatus', value)}
                >
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="employed" id="employed" />
                    <Label htmlFor="employed">Employed</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="self-employed" id="self-employed" />
                    <Label htmlFor="self-employed">Self-Employed</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="retired" id="retired" />
                    <Label htmlFor="retired">Retired</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="student" id="student" />
                    <Label htmlFor="student">Student</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="unemployed" id="unemployed" />
                    <Label htmlFor="unemployed">Unemployed</Label>
                  </div>
                </RadioGroup>
              </div>
              
              {(formData.employmentStatus === 'employed' || formData.employmentStatus === 'self-employed') && (
                <>
                  <div className="space-y-2">
                    <Label htmlFor="employerName">
                      {formData.employmentStatus === 'self-employed' ? 'Business Name' : 'Employer Name'} *
                    </Label>
                    <Input
                      id="employerName"
                      value={formData.employerName}
                      onChange={(e) => updateFormData('employerName', e.target.value)}
                      placeholder={formData.employmentStatus === 'self-employed' ? 'Your Business LLC' : 'ABC Corporation'}
                      className={errors.employerName ? 'border-red-500' : ''}
                    />
                    {errors.employerName && (
                      <p className="text-sm text-red-500">{errors.employerName}</p>
                    )}
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="jobTitle">Job Title</Label>
                    <Input
                      id="jobTitle"
                      value={formData.jobTitle}
                      onChange={(e) => updateFormData('jobTitle', e.target.value)}
                      placeholder="Software Engineer"
                    />
                  </div>
                </>
              )}
              
              <div className="space-y-2">
                <Label htmlFor="annualIncome">Annual Income *</Label>
                <div className="relative">
                  <span className="absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground">$</span>
                  <Input
                    id="annualIncome"
                    type="number"
                    value={formData.annualIncome}
                    onChange={(e) => updateFormData('annualIncome', parseInt(e.target.value) || 0)}
                    placeholder="75000"
                    className={cn('pl-8', errors.annualIncome ? 'border-red-500' : '')}
                  />
                </div>
                {errors.annualIncome && (
                  <p className="text-sm text-red-500">{errors.annualIncome}</p>
                )}
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="sourceOfFunds">Primary Source of Funds *</Label>
                <Select
                  value={formData.sourceOfFunds}
                  onValueChange={(value) => updateFormData('sourceOfFunds', value)}
                >
                  <SelectTrigger className={errors.sourceOfFunds ? 'border-red-500' : ''}>
                    <SelectValue placeholder="Select source" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="salary">Salary/Wages</SelectItem>
                    <SelectItem value="business">Business Income</SelectItem>
                    <SelectItem value="investments">Investment Returns</SelectItem>
                    <SelectItem value="retirement">Retirement/Pension</SelectItem>
                    <SelectItem value="inheritance">Inheritance/Gift</SelectItem>
                    <SelectItem value="real-estate">Real Estate</SelectItem>
                    <SelectItem value="other">Other</SelectItem>
                  </SelectContent>
                </Select>
                {errors.sourceOfFunds && (
                  <p className="text-sm text-red-500">{errors.sourceOfFunds}</p>
                )}
              </div>
            </div>
          )}
          
          {/* Investment Profile Step */}
          {currentStep === 3 && (
            <div className="space-y-4">
              <div className="space-y-2">
                <Label>Investment Experience *</Label>
                <RadioGroup
                  value={formData.investmentExperience}
                  onValueChange={(value: any) => updateFormData('investmentExperience', value)}
                >
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="none" id="none" />
                    <Label htmlFor="none">No Experience</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="beginner" id="beginner" />
                    <Label htmlFor="beginner">Beginner (1-2 years)</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="intermediate" id="intermediate" />
                    <Label htmlFor="intermediate">Intermediate (3-5 years)</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="advanced" id="advanced" />
                    <Label htmlFor="advanced">Advanced (5+ years)</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="professional" id="professional" />
                    <Label htmlFor="professional">Professional Investor</Label>
                  </div>
                </RadioGroup>
              </div>
              
              <div className="space-y-2">
                <Label>Investment Goals * (Select all that apply)</Label>
                <div className="space-y-2">
                  {[
                    { id: 'income', label: 'Regular Income' },
                    { id: 'growth', label: 'Capital Growth' },
                    { id: 'preservation', label: 'Capital Preservation' },
                    { id: 'diversification', label: 'Portfolio Diversification' },
                    { id: 'tax', label: 'Tax Benefits' },
                    { id: 'retirement', label: 'Retirement Planning' },
                  ].map((goal) => (
                    <div key={goal.id} className="flex items-center space-x-2">
                      <Checkbox
                        id={goal.id}
                        checked={formData.investmentGoals.includes(goal.id)}
                        onCheckedChange={(checked) => {
                          if (checked) {
                            updateFormData('investmentGoals', [...formData.investmentGoals, goal.id])
                          } else {
                            updateFormData('investmentGoals', formData.investmentGoals.filter(g => g !== goal.id))
                          }
                        }}
                      />
                      <Label htmlFor={goal.id}>{goal.label}</Label>
                    </div>
                  ))}
                </div>
                {errors.investmentGoals && (
                  <p className="text-sm text-red-500">{errors.investmentGoals}</p>
                )}
              </div>
              
              <div className="space-y-2">
                <Label>Risk Tolerance *</Label>
                <RadioGroup
                  value={formData.riskTolerance}
                  onValueChange={(value: any) => updateFormData('riskTolerance', value)}
                >
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="conservative" id="conservative" />
                    <Label htmlFor="conservative">Conservative (Low Risk)</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="moderate" id="moderate" />
                    <Label htmlFor="moderate">Moderate (Medium Risk)</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="aggressive" id="aggressive" />
                    <Label htmlFor="aggressive">Aggressive (High Risk)</Label>
                  </div>
                </RadioGroup>
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="expectedInvestmentAmount">Expected Investment Amount *</Label>
                <div className="relative">
                  <span className="absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground">$</span>
                  <Input
                    id="expectedInvestmentAmount"
                    type="number"
                    value={formData.expectedInvestmentAmount}
                    onChange={(e) => updateFormData('expectedInvestmentAmount', parseInt(e.target.value) || 0)}
                    placeholder="10000"
                    className={cn('pl-8', errors.expectedInvestmentAmount ? 'border-red-500' : '')}
                  />
                </div>
                {errors.expectedInvestmentAmount && (
                  <p className="text-sm text-red-500">{errors.expectedInvestmentAmount}</p>
                )}
                <p className="text-xs text-muted-foreground">
                  Minimum investment is $100
                </p>
              </div>
              
              <div className="space-y-2">
                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="accredited"
                    checked={formData.accreditedInvestor}
                    onCheckedChange={(checked) => updateFormData('accreditedInvestor', checked)}
                  />
                  <Label htmlFor="accredited">I am an Accredited Investor</Label>
                </div>
                <Alert>
                  <Info className="h-4 w-4" />
                  <AlertDescription>
                    An accredited investor has a net worth exceeding $1 million OR annual income exceeding $200,000 
                    (or $300,000 with spouse) for the last two years.
                  </AlertDescription>
                </Alert>
              </div>
            </div>
          )}
          
          {/* Document Upload Step */}
          {currentStep === 4 && (
            <div className="space-y-6">
              <Alert>
                <Info className="h-4 w-4" />
                <AlertDescription>
                  Please upload clear, unedited photos of your documents. Accepted formats: JPG, PNG, PDF (max 10MB)
                </AlertDescription>
              </Alert>
              
              <div className="space-y-4">
                <div className="space-y-2">
                  <Label>Government-Issued ID (Front) *</Label>
                  <p className="text-sm text-muted-foreground">
                    Driver's license, passport, or state ID
                  </p>
                  <FileUpload
                    accept={{
                      'image/*': ['.png', '.jpg', '.jpeg', '.gif', '.webp'],
                      'application/pdf': ['.pdf']
                    }}
                    maxSize={10 * 1024 * 1024}
                    onUpload={(files) => updateFormData('governmentIdFront', files[0])}
                    variant="compact"
                  />
                  {errors.governmentIdFront && (
                    <p className="text-sm text-red-500">{errors.governmentIdFront}</p>
                  )}
                </div>
                
                <div className="space-y-2">
                  <Label>Government-Issued ID (Back) *</Label>
                  <FileUpload
                    accept={{
                      'image/*': ['.png', '.jpg', '.jpeg', '.gif', '.webp'],
                      'application/pdf': ['.pdf']
                    }}
                    maxSize={10 * 1024 * 1024}
                    onUpload={(files) => updateFormData('governmentIdBack', files[0])}
                    variant="compact"
                  />
                  {errors.governmentIdBack && (
                    <p className="text-sm text-red-500">{errors.governmentIdBack}</p>
                  )}
                </div>
                
                <Separator />
                
                <div className="space-y-2">
                  <Label>Proof of Address *</Label>
                  <p className="text-sm text-muted-foreground">
                    Utility bill, bank statement, or lease agreement (dated within 3 months)
                  </p>
                  <FileUpload
                    accept={{
                      'image/*': ['.png', '.jpg', '.jpeg', '.gif', '.webp'],
                      'application/pdf': ['.pdf']
                    }}
                    maxSize={10 * 1024 * 1024}
                    onUpload={(files) => updateFormData('proofOfAddress', files[0])}
                    variant="compact"
                  />
                  {errors.proofOfAddress && (
                    <p className="text-sm text-red-500">{errors.proofOfAddress}</p>
                  )}
                </div>
                
                <Separator />
                
                <div className="space-y-2">
                  <Label>Selfie Verification *</Label>
                  <p className="text-sm text-muted-foreground">
                    Take a clear selfie holding your ID next to your face
                  </p>
                  <FileUpload
                    accept={{
                      'image/*': ['.png', '.jpg', '.jpeg', '.gif', '.webp']
                    }}
                    maxSize={10 * 1024 * 1024}
                    onUpload={(files) => updateFormData('selfie', files[0])}
                    variant="compact"
                  />
                  {errors.selfie && (
                    <p className="text-sm text-red-500">{errors.selfie}</p>
                  )}
                </div>
                
                {formData.accreditedInvestor && (
                  <>
                    <Separator />
                    <div className="space-y-2">
                      <Label>Bank Statement (Optional)</Label>
                      <p className="text-sm text-muted-foreground">
                        Required for accredited investor verification
                      </p>
                      <FileUpload
                        accept={{
                          'application/pdf': ['.pdf']
                        }}
                        maxSize={10 * 1024 * 1024}
                        onUpload={(files) => updateFormData('bankStatement', files[0])}
                        variant="compact"
                      />
                    </div>
                  </>
                )}
              </div>
            </div>
          )}
          
          {/* Compliance Step */}
          {currentStep === 5 && (
            <div className="space-y-6">
              <div className="space-y-4">
                <div className="p-4 bg-muted rounded-lg space-y-3">
                  <h3 className="font-medium">Regulatory Declarations</h3>
                  
                  <div className="flex items-start space-x-2">
                    <Checkbox
                      id="pep"
                      checked={formData.politicallyExposed}
                      onCheckedChange={(checked) => updateFormData('politicallyExposed', checked)}
                    />
                    <div className="space-y-1">
                      <Label htmlFor="pep">
                        I am a Politically Exposed Person (PEP)
                      </Label>
                      <p className="text-xs text-muted-foreground">
                        A PEP is someone who holds or has held a prominent public position
                      </p>
                    </div>
                  </div>
                  
                  <div className="flex items-start space-x-2">
                    <Checkbox
                      id="sanctions"
                      checked={formData.sanctionsList}
                      onCheckedChange={(checked) => updateFormData('sanctionsList', checked)}
                    />
                    <div className="space-y-1">
                      <Label htmlFor="sanctions">
                        I am on a sanctions or watch list
                      </Label>
                      <p className="text-xs text-muted-foreground">
                        This includes OFAC, UN, or other international sanctions lists
                      </p>
                    </div>
                  </div>
                </div>
                
                <Separator />
                
                <div className="space-y-4">
                  <h3 className="font-medium">Terms & Agreements</h3>
                  
                  <div className="flex items-start space-x-2">
                    <Checkbox
                      id="terms"
                      checked={formData.termsAccepted}
                      onCheckedChange={(checked) => updateFormData('termsAccepted', checked)}
                    />
                    <div className="space-y-1">
                      <Label htmlFor="terms">
                        I accept the Terms of Service *
                      </Label>
                      <p className="text-xs text-muted-foreground">
                        Read our <a href="/terms" className="underline">Terms of Service</a>
                      </p>
                    </div>
                  </div>
                  {errors.termsAccepted && (
                    <p className="text-sm text-red-500">{errors.termsAccepted}</p>
                  )}
                  
                  <div className="flex items-start space-x-2">
                    <Checkbox
                      id="privacy"
                      checked={formData.privacyAccepted}
                      onCheckedChange={(checked) => updateFormData('privacyAccepted', checked)}
                    />
                    <div className="space-y-1">
                      <Label htmlFor="privacy">
                        I accept the Privacy Policy *
                      </Label>
                      <p className="text-xs text-muted-foreground">
                        Read our <a href="/privacy" className="underline">Privacy Policy</a>
                      </p>
                    </div>
                  </div>
                  {errors.privacyAccepted && (
                    <p className="text-sm text-red-500">{errors.privacyAccepted}</p>
                  )}
                  
                  <div className="flex items-start space-x-2">
                    <Checkbox
                      id="aml"
                      checked={formData.amlAccepted}
                      onCheckedChange={(checked) => updateFormData('amlAccepted', checked)}
                    />
                    <div className="space-y-1">
                      <Label htmlFor="aml">
                        I accept the AML/KYC Policy *
                      </Label>
                      <p className="text-xs text-muted-foreground">
                        Read our <a href="/aml-policy" className="underline">AML/KYC Policy</a>
                      </p>
                    </div>
                  </div>
                  {errors.amlAccepted && (
                    <p className="text-sm text-red-500">{errors.amlAccepted}</p>
                  )}
                </div>
                
                <Alert>
                  <Shield className="h-4 w-4" />
                  <AlertDescription>
                    By submitting this form, you consent to PropertyChain verifying your identity and 
                    conducting background checks as required by law. Your information is encrypted and 
                    stored securely.
                  </AlertDescription>
                </Alert>
              </div>
            </div>
          )}
        </CardContent>
        
        {/* Navigation */}
        <Separator />
        <CardContent className="pt-6">
          <div className="flex justify-between">
            <Button
              variant="outline"
              onClick={handlePrevious}
              disabled={currentStep === 0 || isSubmitting}
            >
              <ArrowLeft className="mr-2 h-4 w-4" />
              Previous
            </Button>
            
            <Button
              onClick={handleNext}
              disabled={isSubmitting}
            >
              {isSubmitting ? (
                <>
                  <Clock className="mr-2 h-4 w-4 animate-spin" />
                  Verifying...
                </>
              ) : currentStep === steps.length - 1 ? (
                <>
                  Submit Verification
                  <CheckCircle className="ml-2 h-4 w-4" />
                </>
              ) : (
                <>
                  Next
                  <ArrowRight className="ml-2 h-4 w-4" />
                </>
              )}
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}